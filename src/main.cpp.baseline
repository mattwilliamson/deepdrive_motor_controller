#include <Arduino.h>

// This file will play a theme song on the motors and then set the motors to a target velocity

/*
MKS ESP32 FOC Closed Loop Speed Control Example; Test Library：SimpleFOC 2.1.1; Test Hardware：MKS ESP32 FOC V1.0
Enter the "T+number" command in the serial port window to make the two motors rotate in closed loop.
For example, to have both motors turn at 10rad/s, enter: T10.
When using your own motor, please remember to modify the default number of pole pairs, the value in BLDCMotor()
The default power supply voltage set by the program is 12V.
Please remember to modify the values in voltage_power_supply and voltage_limit if you use other voltages for power supply.
The default PID is for the YT2804 motor. When using your own motor.
You need to modify the PID parameters to achieve better results.
 */
#include <SimpleFOC.h>

HallSensor sensorFront = HallSensor(18, 19, 15, 15);
HallSensor sensorBack = HallSensor(5, 23, 13, 15);

InlineCurrentSense currentSenseFront = InlineCurrentSense(0.01, (float)50.0, 39, 36);
InlineCurrentSense currentSenseBack = InlineCurrentSense(0.01, (float)50.0, 35, 34);


void intFrontA(){sensorFront.handleA();}
void intFrontB(){sensorFront.handleB();}
void intFrontC(){sensorFront.handleC();}

void intBackA(){sensorBack.handleA();}
void intBackB(){sensorBack.handleB();}
void intBackC(){sensorBack.handleC();}


//  BLDCMotor(int pp, (optional R, KV))
//  - pp  - pole pair number
//  - R   - phase resistance value - optional
//  - KV  - motor KV rating [rpm/V] - optional

//Motor Parameters
BLDCMotor motorFront = BLDCMotor(15);                           //Modify the value in BLDMotor() according to the number of pole pairs of the selected motorFront
BLDCDriver3PWM driverFront = BLDCDriver3PWM(32, 33, 25, 22);

BLDCMotor motorBack = BLDCMotor(15);                          //Also modify the value in BLDMotor() here
BLDCDriver3PWM driverBack = BLDCDriver3PWM(26, 27, 14, 12);

#include <TonePlayer.h>
#include <BLDCSpeaker.h>
#include <BLDCMotor.h>
#include <RTTTL.h>

BLDCSpeaker speakerFront = BLDCSpeaker(&motorFront, 1.5, 10, -12);
BLDCSpeaker speakerBack = BLDCSpeaker(&motorBack, 1.5, 10, -12);
TonePlayer player;
// const char rtttl[] PROGMEM = RTTTL_PINK_PANTHER;
const char rtttl[] PROGMEM = "HarryPot:d=16,o=5,b=125:2p,8p,8b,8e.6,g6,8f#6,4e6,8b6,4a.6,4f#.6,8e.6,g6,8f#6,4d6,8f6,2b,8p,8b,8e.6,g6,8f#6,4e6,8b6,4d7,8c#7,4c7,8g#6,8c.7,b6,8a#6,4f#6,8g6,2e6,8p,8g6,4b6,8g6,4b6,8g6,4c7,8b6,4a#6,8f#6,8g.6,b6,8a#6,4a#,8b,2b6,8p";

//Command Settings
float target_velocity = 0;                                //Enter "T+speed" in the serial monitor to make the two motors rotate in closed loop
Commander command = Commander(Serial);                    //For example, to make both motors rotate at a speed of 10rad/s, input "T10"
void doTarget(char* cmd) { command.scalar(&target_velocity, cmd); }

void setup() {
  delay(10000);

  // pinMode(18, INPUT_PULLUP);
  // pinMode(19, INPUT_PULLUP);
  // pinMode(15, INPUT_PULLUP);

  // pinMode(5, INPUT_PULLUP);
  // pinMode(23, INPUT_PULLUP);
  // pinMode(13, INPUT_PULLUP);
    // sensor.velocity_max = 1000;
    // sensorBack.velocity_max = 1000;

  currentSenseFront.gain_a *= -1;
  currentSenseFront.gain_b *= -1;
  currentSenseBack.gain_a *= -1;
  currentSenseBack.gain_b *= -1;

  currentSenseFront.init();
  currentSenseBack.init();




    sensorFront.init();
    sensorBack.init();

    sensorFront.enableInterrupts(intFrontA, intFrontB, intFrontC);
    sensorBack.enableInterrupts(intBackA, intBackB, intBackC);

    
  // motorBack.torque_controller = TorqueControlType::foc_current; 
  // motorBack.controller = MotionControlType::torque;
  // motor2.torque_controller = TorqueControlType::foc_current; 
  // motor2.controller = MotionControlType::torque;



 // aligning voltage [V]
  motorFront.voltage_sensor_align = 3;
  motorBack.voltage_sensor_align = 3;
  // index search velocity [rad/s]
  motorFront.velocity_index_search = 3;
  motorBack.velocity_index_search = 3;



  //Connecting Motor Objects to Sensor Objects
  motorFront.linkSensor(&sensorFront);
  motorBack.linkSensor(&sensorBack);

  //Supply Voltage Setting [V]
  driverFront.voltage_power_supply = 12;               //When using other supply voltages, modify the value of voltage_power_supply here
  driverFront.pwm_frequency = 20000;

  driverFront.init();

  driverBack.voltage_power_supply = 12;              //Also modify the value of voltage_power_supply here
  driverBack.pwm_frequency = 20000;

  driverBack.init();
  //Connect the Motor and Driver Objects
  motorFront.linkDriver(&driverFront);
  motorBack.linkDriver(&driverBack);

  motorFront.linkCurrentSense(&currentSenseFront);
  motorBack.linkCurrentSense(&currentSenseBack);

  currentSenseFront.linkDriver(&driverFront);
  currentSenseBack.linkDriver(&driverBack);
  
  //FOC Model Selection
  motorFront.foc_modulation = FOCModulationType::SpaceVectorPWM;
  motorBack.foc_modulation = FOCModulationType::SpaceVectorPWM;
  //Motion Control Mode Settings
  motorFront.controller = MotionControlType::velocity;
  motorBack.controller = MotionControlType::velocity;


  //PID Settings
  motorFront.PID_velocity.P = 0.2;
  motorFront.PID_velocity.I = 1.0;
  motorFront.PID_velocity.D = 0;

  motorBack.PID_velocity.P = 0.2;
  motorBack.PID_velocity.I = 1.0;
  motorBack.PID_velocity.D = 0;
  //Maximum Motor Voltage Limit
  motorFront.voltage_limit = 3.0;                   //When using other power supply voltages, modify the value of voltage_limit here
  motorFront.current_limit = .25;
  motorBack.voltage_limit = 3.0;                  //Also modify the value of voltage_limit here
  motorBack.current_limit = .25;

  // default value is 300 volts per sec  ~ 0.3V per millisecond
  motorFront.PID_velocity.output_ramp = 1000;
  motorBack.PID_velocity.output_ramp = 1000;
  
  //Speed Low-pass Filter Time Constant
  motorFront.LPF_velocity.Tf = 0.08; // .01 = 5ms (default)
  motorBack.LPF_velocity.Tf = 0.08;

  //Maximum Speed Limit Settings
  motorFront.velocity_limit = 40;
  motorBack.velocity_limit = 40;

  Serial.begin(115200);
  motorFront.useMonitoring(Serial);
  motorBack.useMonitoring(Serial);

  motorBack.monitor_downsample = 100;
  motorBack.monitor_variables = _MON_TARGET | _MON_VEL | _MON_ANGLE | _MON_CURR_Q;
  motorFront.monitor_downsample = 100;
  motorFront.monitor_variables = _MON_TARGET | _MON_VEL | _MON_ANGLE | _MON_CURR_Q;

  // currentSenseFront.skip_align = true;
  // currentSenseBack.skip_align = true;

  
  //Initialize the Motor
  Serial.println(F("Motor 1 init."));
  motorFront.init();
  motorFront.initFOC();

  Serial.println(F("---"));

  //Initialize FOC
  Serial.println(F("Motor 2 init."));
  motorBack.init();
  motorBack.initFOC();
  player.attachSpeaker(&speakerFront);
  player.attachSpeaker(&speakerBack);

  Song* song = parseRTTL(rtttl);
  player.play(song);

  delay(1000);

  command.add('T', doTarget, "target velocity");

  Serial.println(F("Motor ready."));
  Serial.println(F("Set the target velocity using serial terminal:"));
  
}



void print_current() {
  // PhaseCurrent_s currents0 = currentSenseFront.getPhaseCurrents();
  // float current_magnitude0 = currentSenseFront.getDCCurrent();
  // PhaseCurrent_s currents1 = currentSenseBack.getPhaseCurrents();
  // float current_magnitude1 = currentSenseBack.getDCCurrent();

  //   Serial.print(currents0.a*1000); // milli Amps
  // Serial.print("\t");
  // Serial.print(currents0.b*1000); // milli Amps
  // Serial.print("\t");
  // Serial.print(currents0.c*1000); // milli Amps
  // Serial.print("\t");
  // Serial.println(current_magnitude0*1000); // milli Amps
  // Serial.print(currents1.a*1000); // milli Amps
  // Serial.print("\t");
  // Serial.print(currents1.b*1000); // milli Amps
  // Serial.print("\t");
  // Serial.print(currents1.c*1000); // milli Amps
  // Serial.print("\t");
  // Serial.println(current_magnitude1*1000); // milli Amps
  // Serial.println();

}

void loop() {

    if(player.isPlaying()) {
      player.loop();
    } else {
  
    motorFront.voltage_limit = 12;                   //When using other power supply voltages, modify the value of voltage_limit here
    motorBack.voltage_limit = 12;                  //Also modify the value of voltage_limit here

    motorFront.loopFOC();
    motorBack.loopFOC();

    motorFront.move(target_velocity);
    motorBack.move(target_velocity);

    command.run();

    // print_current();

    // motorBack.monitor();
    // motorFront.monitor();
  }
}
